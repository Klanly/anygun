CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(server)

SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/../)
SET(SERVER_VERSION_MAJOR 1)
SET(SERVER_VERSION_MINOR 0)
# configure a header file to pass some of the CMake settings.
CONFIGURE_FILE("Config.h.in" "Config.h")

SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

IF(WIN32)
	EXECUTE_PROCESS(COMMAND ${CMAKE_SOURCE_DIR}/../Tools/genArpc.bat WORKING_DIRECTORY  ${CMAKE_SOURCE_DIR}/../Tools/)
	ADD_DEFINITIONS(-DWIN32)
	SET(CMAKE_C_COMPILER "clang")
	SET(CMAKE_CXX_COMPILER "clang++")
	SET(CMAKE_C_FLAGS "/D_DEBUG /MDd /Zi /Od /RTC1 /EHsc") 
	SET(CMAKE_CXX_FLAGS "/D_DEBUG /MDd /Zi /Od /RTC1 /EHsc")
	
ELSEIF(UNIX)
	EXECUTE_PROCESS(COMMAND ${CMAKE_SOURCE_DIR}/../Tools/genArpc.sh WORKING_DIRECTORY  ${CMAKE_SOURCE_DIR}/../Tools/)
	SET(CMAKE_C_COMPILER "clang")
	SET(CMAKE_CXX_COMPILER "clang++")
	SET(CMAKE_BUILD_TYPE RELEASE CACHE STRING "RELEASE" FORCE)
	SET(CMAKE_CXX_FLAGS_RELEASE "-Wall -O0 -m64 -ggdb -std=c++11")
	SET(CMAKE_C_FLAGS_RELEASE "-Wall -O0 -m64 -ggdb")
ENDIF()

SET(Boost_USE_STATIC_LIBS ON)
FIND_PACKAGE(Boost COMPONENTS system filesystem REQUIRED)
INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
LINK_DIRECTORIES(${Boost_LIBRARY_DIR})


SET(ZLIB_ROOT $ENV{ZLIB_ROOT})
FIND_PACKAGE(ZLIB REQUIRED)
INCLUDE_DIRECTORIES( ${Zlib_INCLUDE_DIR} )
LINK_DIRECTORIES(${Zlib_LIBRARY_DIR})

SET(CURL_INCLUDE_DIR $ENV{CURL_INCLUDE_DIR})
SET(CURL_LIBRARY $ENV{CURL_LIBRARY})
FIND_PACKAGE(CURL REQUIRED)
INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})  
LINK_DIRECTORIES(${CURL_LIBRARY_DIR})
ADD_DEFINITIONS(-DUSE_MYSQL)

INCLUDE_DIRECTORIES($ENV{ACE_ROOT})

LINK_DIRECTORIES($ENV{ACE_ROOT}/lib/ACEd.lib)

#添加工程
ADD_SUBDIRECTORY(common)
ADD_SUBDIRECTORY(tables)
ADD_SUBDIRECTORY(scene)
ADD_SUBDIRECTORY(login)
ADD_SUBDIRECTORY(mall)
ADD_SUBDIRECTORY(db)
ADD_SUBDIRECTORY(gateway)
ADD_SUBDIRECTORY(world)
ADD_SUBDIRECTORY(log)
ADD_SUBDIRECTORY(refreshsql)
ADD_SUBDIRECTORY(gmtool)
ADD_SUBDIRECTORY(test)



